{"ast":null,"code":"var _jsxFileName = \"/Users/tasneemmahmud/Desktop/jscompiler/src/App.js\",\n  _s = $RefreshSig$();\n// OnlineJSCompiler.js\nimport { useState } from 'react';\nimport './App.css';\n\n// Express backend in the same file\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst express = require('express');\nconst fetch = require('node-fetch');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst PORT = 5000;\n\n// Middleware for parsing JSON\napp.use(bodyParser.json());\n\n// Backend API endpoint for AI suggestions\napp.post('/api/getAiSuggestion', async (req, res) => {\n  const {\n    code\n  } = req.body;\n  try {\n    var _data$choices$, _data$choices$$messag;\n    const response = await fetch('https://api.openai.com/v1/chat/completions', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer YOUR_API_KEY_HERE`\n      },\n      body: JSON.stringify({\n        model: 'gpt-3.5-turbo',\n        messages: [{\n          role: 'user',\n          content: `Suggest improvements for the following JavaScript code:\\n\\n${code}`\n        }],\n        max_tokens: 150\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      return res.status(response.status).json({\n        error: errorData\n      });\n    }\n    const data = await response.json();\n    res.json({\n      suggestion: ((_data$choices$ = data.choices[0]) === null || _data$choices$ === void 0 ? void 0 : (_data$choices$$messag = _data$choices$.message) === null || _data$choices$$messag === void 0 ? void 0 : _data$choices$$messag.content) || 'No suggestion available'\n    });\n  } catch (error) {\n    console.error('Error fetching AI suggestion:', error);\n    res.status(500).json({\n      error: 'Failed to fetch AI suggestion'\n    });\n  }\n});\n\n// Start Express server\napp.listen(PORT, () => {\n  console.log(`Backend server running on http://localhost:${PORT}`);\n});\n\n// Frontend React component\nconst OnlineJSCompiler = () => {\n  _s();\n  const [code, setCode] = useState('');\n  const [output, setOutput] = useState('');\n  const [aiSuggestion, setAiSuggestion] = useState('');\n\n  // Function to execute JavaScript code\n  const handleRunCode = () => {\n    console.log('Run Code button clicked');\n    try {\n      const consoleLog = [];\n      const customConsole = {\n        log: (...args) => consoleLog.push(args.join(' '))\n      };\n      const result = Function('console', `\"use strict\"; ${code}`)(customConsole);\n      setOutput(consoleLog.join('\\n') || (result === null || result === void 0 ? void 0 : result.toString()) || '');\n    } catch (err) {\n      console.error('Error:', err);\n      setOutput(err.toString());\n    }\n  };\n\n  // Function to fetch AI suggestions\n  const getAiSuggestion = async () => {\n    try {\n      const response = await fetch('/api/getAiSuggestion', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code\n        })\n      });\n      if (!response.ok) {\n        var _errorData$error;\n        const errorData = await response.json();\n        console.error('Error details:', errorData);\n        throw new Error(`API error: ${response.status} - ${((_errorData$error = errorData.error) === null || _errorData$error === void 0 ? void 0 : _errorData$error.message) || 'Unknown error'}`);\n      }\n      const data = await response.json();\n      console.log('API Response:', data);\n      setAiSuggestion(data.suggestion || 'No suggestion available');\n    } catch (error) {\n      console.error('Error fetching AI suggestion:', error);\n      setAiSuggestion(`Error: ${error.message}`);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"title\",\n      children: \"Online JavaScript Compiler\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"code-input\",\n      children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"8\",\n        placeholder: \"Write your JavaScript code here...\",\n        value: code,\n        onChange: e => setCode(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRunCode,\n        children: \"Run Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ai-suggestions\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getAiSuggestion,\n        children: \"Get AI Suggestion\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"suggestion-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"AI Suggestions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n          className: \"ai-suggestion\",\n          children: aiSuggestion\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"output-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Output:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n        className: \"output\",\n        children: output\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 101,\n    columnNumber: 9\n  }, this);\n};\n_s(OnlineJSCompiler, \"jPICn1IoebrmkdisoHQtkz8JBQI=\");\n_c = OnlineJSCompiler;\nexport default OnlineJSCompiler;\nvar _c;\n$RefreshReg$(_c, \"OnlineJSCompiler\");","map":{"version":3,"names":["useState","jsxDEV","_jsxDEV","express","require","fetch","bodyParser","app","PORT","use","json","post","req","res","code","body","_data$choices$","_data$choices$$messag","response","method","headers","JSON","stringify","model","messages","role","content","max_tokens","ok","errorData","status","error","data","suggestion","choices","message","console","listen","log","OnlineJSCompiler","_s","setCode","output","setOutput","aiSuggestion","setAiSuggestion","handleRunCode","consoleLog","customConsole","args","push","join","result","Function","toString","err","getAiSuggestion","_errorData$error","Error","className","children","fileName","_jsxFileName","lineNumber","columnNumber","rows","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/tasneemmahmud/Desktop/jscompiler/src/App.js"],"sourcesContent":["// OnlineJSCompiler.js\nimport { useState } from 'react';\nimport './App.css';\n\n// Express backend in the same file\nconst express = require('express');\nconst fetch = require('node-fetch');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst PORT = 5000;\n\n// Middleware for parsing JSON\napp.use(bodyParser.json());\n\n// Backend API endpoint for AI suggestions\napp.post('/api/getAiSuggestion', async (req, res) => {\n    const { code } = req.body;\n\n    try {\n        const response = await fetch('https://api.openai.com/v1/chat/completions', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'Authorization': `Bearer YOUR_API_KEY_HERE`\n            },\n            body: JSON.stringify({\n                model: 'gpt-3.5-turbo',\n                messages: [{ role: 'user', content: `Suggest improvements for the following JavaScript code:\\n\\n${code}` }],\n                max_tokens: 150,\n            }),\n        });\n\n        if (!response.ok) {\n            const errorData = await response.json();\n            return res.status(response.status).json({ error: errorData });\n        }\n\n        const data = await response.json();\n        res.json({ suggestion: data.choices[0]?.message?.content || 'No suggestion available' });\n    } catch (error) {\n        console.error('Error fetching AI suggestion:', error);\n        res.status(500).json({ error: 'Failed to fetch AI suggestion' });\n    }\n});\n\n// Start Express server\napp.listen(PORT, () => {\n    console.log(`Backend server running on http://localhost:${PORT}`);\n});\n\n// Frontend React component\nconst OnlineJSCompiler = () => {\n    const [code, setCode] = useState('');\n    const [output, setOutput] = useState('');\n    const [aiSuggestion, setAiSuggestion] = useState('');\n\n    // Function to execute JavaScript code\n    const handleRunCode = () => {\n        console.log('Run Code button clicked');\n        try {\n            const consoleLog = [];\n            const customConsole = {\n                log: (...args) => consoleLog.push(args.join(' ')),\n            };\n            const result = Function('console', `\"use strict\"; ${code}`)(customConsole);\n            setOutput(consoleLog.join('\\n') || result?.toString() || '');\n        } catch (err) {\n            console.error('Error:', err);\n            setOutput(err.toString());\n        }\n    };\n\n    // Function to fetch AI suggestions\n    const getAiSuggestion = async () => {\n        try {\n            const response = await fetch('/api/getAiSuggestion', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ code }),\n            });\n\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Error details:', errorData);\n                throw new Error(`API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);\n            }\n\n            const data = await response.json();\n            console.log('API Response:', data);\n\n            setAiSuggestion(data.suggestion || 'No suggestion available');\n        } catch (error) {\n            console.error('Error fetching AI suggestion:', error);\n            setAiSuggestion(`Error: ${error.message}`);\n        }\n    };\n\n    return (\n        <div className=\"container\">\n            <h1 className=\"title\">Online JavaScript Compiler</h1>\n            <div className=\"code-input\">\n                <textarea\n                    rows=\"8\"\n                    placeholder=\"Write your JavaScript code here...\"\n                    value={code}\n                    onChange={(e) => setCode(e.target.value)}\n                ></textarea>\n                <button onClick={handleRunCode}>Run Code</button>\n            </div>\n            <div className=\"ai-suggestions\">\n                <button onClick={getAiSuggestion}>Get AI Suggestion</button>\n                <div className=\"suggestion-container\">\n                    <h3>AI Suggestions:</h3>\n                    <pre className=\"ai-suggestion\">{aiSuggestion}</pre>\n                </div>\n            </div>\n            <div className=\"output-container\">\n                <h2>Output:</h2>\n                <pre className=\"output\">{output}</pre>\n            </div>\n        </div>\n    );\n};\n\nexport default OnlineJSCompiler;\n"],"mappings":";;AAAA;AACA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnC,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAMG,GAAG,GAAGJ,OAAO,CAAC,CAAC;AACrB,MAAMK,IAAI,GAAG,IAAI;;AAEjB;AACAD,GAAG,CAACE,GAAG,CAACH,UAAU,CAACI,IAAI,CAAC,CAAC,CAAC;;AAE1B;AACAH,GAAG,CAACI,IAAI,CAAC,sBAAsB,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACjD,MAAM;IAAEC;EAAK,CAAC,GAAGF,GAAG,CAACG,IAAI;EAEzB,IAAI;IAAA,IAAAC,cAAA,EAAAC,qBAAA;IACA,MAAMC,QAAQ,GAAG,MAAMb,KAAK,CAAC,4CAA4C,EAAE;MACvEc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,kBAAkB;QAClC,eAAe,EAAE;MACrB,CAAC;MACDL,IAAI,EAAEM,IAAI,CAACC,SAAS,CAAC;QACjBC,KAAK,EAAE,eAAe;QACtBC,QAAQ,EAAE,CAAC;UAAEC,IAAI,EAAE,MAAM;UAAEC,OAAO,EAAE,8DAA8DZ,IAAI;QAAG,CAAC,CAAC;QAC3Ga,UAAU,EAAE;MAChB,CAAC;IACL,CAAC,CAAC;IAEF,IAAI,CAACT,QAAQ,CAACU,EAAE,EAAE;MACd,MAAMC,SAAS,GAAG,MAAMX,QAAQ,CAACR,IAAI,CAAC,CAAC;MACvC,OAAOG,GAAG,CAACiB,MAAM,CAACZ,QAAQ,CAACY,MAAM,CAAC,CAACpB,IAAI,CAAC;QAAEqB,KAAK,EAAEF;MAAU,CAAC,CAAC;IACjE;IAEA,MAAMG,IAAI,GAAG,MAAMd,QAAQ,CAACR,IAAI,CAAC,CAAC;IAClCG,GAAG,CAACH,IAAI,CAAC;MAAEuB,UAAU,EAAE,EAAAjB,cAAA,GAAAgB,IAAI,CAACE,OAAO,CAAC,CAAC,CAAC,cAAAlB,cAAA,wBAAAC,qBAAA,GAAfD,cAAA,CAAiBmB,OAAO,cAAAlB,qBAAA,uBAAxBA,qBAAA,CAA0BS,OAAO,KAAI;IAA0B,CAAC,CAAC;EAC5F,CAAC,CAAC,OAAOK,KAAK,EAAE;IACZK,OAAO,CAACL,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrDlB,GAAG,CAACiB,MAAM,CAAC,GAAG,CAAC,CAACpB,IAAI,CAAC;MAAEqB,KAAK,EAAE;IAAgC,CAAC,CAAC;EACpE;AACJ,CAAC,CAAC;;AAEF;AACAxB,GAAG,CAAC8B,MAAM,CAAC7B,IAAI,EAAE,MAAM;EACnB4B,OAAO,CAACE,GAAG,CAAC,8CAA8C9B,IAAI,EAAE,CAAC;AACrE,CAAC,CAAC;;AAEF;AACA,MAAM+B,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAM,CAAC1B,IAAI,EAAE2B,OAAO,CAAC,GAAGzC,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAAC0C,MAAM,EAAEC,SAAS,CAAC,GAAG3C,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAM,CAAC4C,YAAY,EAAEC,eAAe,CAAC,GAAG7C,QAAQ,CAAC,EAAE,CAAC;;EAEpD;EACA,MAAM8C,aAAa,GAAGA,CAAA,KAAM;IACxBV,OAAO,CAACE,GAAG,CAAC,yBAAyB,CAAC;IACtC,IAAI;MACA,MAAMS,UAAU,GAAG,EAAE;MACrB,MAAMC,aAAa,GAAG;QAClBV,GAAG,EAAEA,CAAC,GAAGW,IAAI,KAAKF,UAAU,CAACG,IAAI,CAACD,IAAI,CAACE,IAAI,CAAC,GAAG,CAAC;MACpD,CAAC;MACD,MAAMC,MAAM,GAAGC,QAAQ,CAAC,SAAS,EAAE,iBAAiBvC,IAAI,EAAE,CAAC,CAACkC,aAAa,CAAC;MAC1EL,SAAS,CAACI,UAAU,CAACI,IAAI,CAAC,IAAI,CAAC,KAAIC,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEE,QAAQ,CAAC,CAAC,KAAI,EAAE,CAAC;IAChE,CAAC,CAAC,OAAOC,GAAG,EAAE;MACVnB,OAAO,CAACL,KAAK,CAAC,QAAQ,EAAEwB,GAAG,CAAC;MAC5BZ,SAAS,CAACY,GAAG,CAACD,QAAQ,CAAC,CAAC,CAAC;IAC7B;EACJ,CAAC;;EAED;EACA,MAAME,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,MAAMtC,QAAQ,GAAG,MAAMb,KAAK,CAAC,sBAAsB,EAAE;QACjDc,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACL,cAAc,EAAE;QACpB,CAAC;QACDL,IAAI,EAAEM,IAAI,CAACC,SAAS,CAAC;UAAER;QAAK,CAAC;MACjC,CAAC,CAAC;MAEF,IAAI,CAACI,QAAQ,CAACU,EAAE,EAAE;QAAA,IAAA6B,gBAAA;QACd,MAAM5B,SAAS,GAAG,MAAMX,QAAQ,CAACR,IAAI,CAAC,CAAC;QACvC0B,OAAO,CAACL,KAAK,CAAC,gBAAgB,EAAEF,SAAS,CAAC;QAC1C,MAAM,IAAI6B,KAAK,CAAC,cAAcxC,QAAQ,CAACY,MAAM,MAAM,EAAA2B,gBAAA,GAAA5B,SAAS,CAACE,KAAK,cAAA0B,gBAAA,uBAAfA,gBAAA,CAAiBtB,OAAO,KAAI,eAAe,EAAE,CAAC;MACrG;MAEA,MAAMH,IAAI,GAAG,MAAMd,QAAQ,CAACR,IAAI,CAAC,CAAC;MAClC0B,OAAO,CAACE,GAAG,CAAC,eAAe,EAAEN,IAAI,CAAC;MAElCa,eAAe,CAACb,IAAI,CAACC,UAAU,IAAI,yBAAyB,CAAC;IACjE,CAAC,CAAC,OAAOF,KAAK,EAAE;MACZK,OAAO,CAACL,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrDc,eAAe,CAAC,UAAUd,KAAK,CAACI,OAAO,EAAE,CAAC;IAC9C;EACJ,CAAC;EAED,oBACIjC,OAAA;IAAKyD,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACtB1D,OAAA;MAAIyD,SAAS,EAAC,OAAO;MAAAC,QAAA,EAAC;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrD9D,OAAA;MAAKyD,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACvB1D,OAAA;QACI+D,IAAI,EAAC,GAAG;QACRC,WAAW,EAAC,oCAAoC;QAChDC,KAAK,EAAErD,IAAK;QACZsD,QAAQ,EAAGC,CAAC,IAAK5B,OAAO,CAAC4B,CAAC,CAACC,MAAM,CAACH,KAAK;MAAE;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACZ9D,OAAA;QAAQqE,OAAO,EAAEzB,aAAc;QAAAc,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAChD,CAAC,eACN9D,OAAA;MAAKyD,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC3B1D,OAAA;QAAQqE,OAAO,EAAEf,eAAgB;QAAAI,QAAA,EAAC;MAAiB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eAC5D9D,OAAA;QAAKyD,SAAS,EAAC,sBAAsB;QAAAC,QAAA,gBACjC1D,OAAA;UAAA0D,QAAA,EAAI;QAAe;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxB9D,OAAA;UAAKyD,SAAS,EAAC,eAAe;UAAAC,QAAA,EAAEhB;QAAY;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eACN9D,OAAA;MAAKyD,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC7B1D,OAAA;QAAA0D,QAAA,EAAI;MAAO;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eAChB9D,OAAA;QAAKyD,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAElB;MAAM;QAAAmB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACrC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACxB,EAAA,CAzEID,gBAAgB;AAAAiC,EAAA,GAAhBjC,gBAAgB;AA2EtB,eAAeA,gBAAgB;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}